// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

contract Token {

  constructor() {
    owner = msg.sender;
  }

  // Variables
  string public name = "Sample";
  string public symbol = "SMP";
  uint public totalSupply = 0;
  address public owner;

  // Events (This will record of what is happenining in the contract)
  event Mint(address indexed to, uint amount);
  event Burn(address indexed from, uint amount);
  event Transfer(address indexed from, address indexed to, uint value);

  // Error
  error InsufficientBalance(uint balance, uint withdrawAmount);

  // Mapping (Will store mapping and balance of addresses)
  mapping(address => uint) public balances;

  // Modifier (Used to check the message of sender, can be called only by onwer, not anyone else)
  modifier onlyOwner() {
    assert(msg.sender == owner);
    _;
  }

  // Mint
  function mint(address _address, uint _value) public onlyOwner {
    totalSupply += _value;
    balances[_address] += _value;
    emit Mint(_address, _value);
  }

  // Burn
  function burn(address _address, uint _value) public onlyOwner {
    if (balances[_address] < _value) {
      revert InsufficientBalance({balance: balances[_address], withdrawAmount: _value});
    } else {
      totalSupply -= _value;
      balances[_address] -= _value;
      emit Burn(_address, _value);
    }
  }

  // Transfer (Must be
  function transfer(address _receiver, uint _value) public {
    require(balances[msg.sender] >= _value, "Amount must be greater than the transfer value!");
    balances[msg.sender] -= _value;
    balances[_receiver] += _value;
    emit Transfer(msg.sender, _receiver, _value);
  }
}
